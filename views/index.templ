package views

import (
	"go-github/views/components"
)

// GitHubUser represents a GitHub user with extended details
type GitHubUser struct {
	Login         string
	Name          string
	AvatarURL     string
	Bio           string
	Company       string
	Blog          string
	Location      string
	Email         string
	PublicRepos   int
	Followers     int
	Following     int
	CreatedAt     string
	CommitHistory []string // Map to store commit counts
}

templ Index(user *GitHubUser) {
	<!DOCTYPE html>
	<html lang="en">
		@components.Header()
		<body>
			<main class="min-h-screen w-full">
				<nav class="flex w-full border border-b-zinc-200 px-4 py-4 items-center justify-center">
					<h3 class="text-base lg:text-lg font-medium text-center">
						GO Github
					</h3>
				</nav>
				<div class="mt-6 w-full flex justify-center items-center flex-col">
					<!-- Search Form -->
					<form method="get" id="searchForm" class="w-96">
						<input
							type="text"
							name="username"
							class="w-full border rounded-lg mb-2 p-4"
							placeholder="Input username"
							id="username"
							value={ user.Login }
							autocomplete="off"
							required
						/>
						<button class="py-1 px-4 w-full h-10 rounded-lg text-white bg-zinc-800">
							Search
						</button>
					</form>
					<br />

					<!-- Main Content Container -->
					<div class="flex flex-col lg:flex-row w-full max-w-6xl mx-auto mt-6 gap-8" style="display: none;" id="profileContent">
						<!-- Profile Information -->
						<div id="profileInfo" class="w-full lg:w-1/2 flex justify-center items-center flex-col p-4 border border-gray-300 rounded-lg">
							<!-- Dynamic user info will be inserted here -->
						</div>

						<!-- Commit History Scatterplot -->
						<div id="commitHistory" class="w-full lg:w-1/2 flex flex-col items-center p-4 border border-gray-300 rounded-lg">
							<!-- Dynamic commit history chart will be inserted here -->
						</div>
					</div>
				</div>
			</main>
		</body>
		<script>

			updateUserDetails = async (user) => {
					// Populate Profile Info
					const profileHTML = `
						<img class="w-24 h-24 rounded-full" src="${user.AvatarURL}" />
						<h1 class="text-3xl font-bold mt-4">
							<a href="https://github.com/${user.Login}" target="_blank" rel="noopener noreferrer">
								${user.Name}
							</a>
						</h1>
						<p class="text-center mb-2"><em>${user.Bio}</em></p>
						<div class="w-full px-4 items-center flex flex-col justify-center">
							<p><strong>Username:</strong> ${user.Login}</p>
							<p><strong>Company:</strong> ${user.Company}</p>
							<p><strong>Blog:</strong> <a href="${user.Blog}" target="_blank">${user.Blog}</a></p>
							<p><strong>Location:</strong> ${user.Location}</p>
							<p><strong>Email:</strong> ${user.Email}</p>
							<p><strong>Public Repos:</strong> ${user.PublicRepos}</p>
							<p><strong>Followers:</strong> ${user.Followers}</p>
							<p><strong>Following:</strong> ${user.Following}</p>
							<p><strong>Joined:</strong> ${user.CreatedAt}</p>
						</div>
					`;
					document.getElementById('profileInfo').innerHTML = profileHTML;

					// Inject the canvas for the commit history chart
					document.getElementById('commitHistory').innerHTML = `
						<h2 class="text-xl font-bold mb-4">Commit History Scatterplot</h2>
						<canvas id="commitHistoryChart" class="w-full h-64"></canvas>
					`;

					const listToChartData = commitData => {
						return commitData.map(datapoint => {
							const [date, commits] = datapoint.split(':');
							return {
								x: date,
								y: commits
							}
						});
					};
					const ctx = document.getElementById('commitHistoryChart').getContext('2d');
					new Chart(ctx, {
						type: 'line',
						data: {
							datasets: [{
								label: "Commits",
								data: listToChartData(user.CommitHistory || []),
								backgroundColor: "#3e95cd",
								borderColor: "#3e95cd",
								fill: false
							}]
						},
						options: {
							scales: {
								xAxes: [{
									type: 'time',
									time: {
										unit: 'month',
										displayFormats: {
											month: 'MMM YYYY'
										}
									}
								}]
							}
						}
					});
			}
			
			document.getElementById('searchForm').addEventListener('submit', async function(event) {
				event.preventDefault(); // Prevent page reload

				const username = document.getElementById('username').value;
				document.getElementById('profileContent').style.display = 'flex';

				try {
					// Show a loading state if needed
					document.getElementById('profileInfo').innerHTML = "<p>Loading...</p>";
					document.getElementById('commitHistory').innerHTML = "<p>Loading chart...</p>";

					// Fetch user profile and commit history
					const response = await fetch(`http://localhost:8080/?username=${encodeURIComponent(username)}`);
					if (!response.ok) {
						if (response.status === 429) {
							const tokenInput = prompt("GitHub API rate limit exceeded. Please enter your GitHub personal access token:");
							if (tokenInput) {
								const response = await fetch("/token", {
									method: "POST",
									headers: {
										"Content-Type": "application/json"
									},
									body: JSON.stringify({ token: tokenInput , username})
								});

								if (response.ok) {
									const user = await response.json();
									updateUserDetails(user);
								} else 
									throw new Error(await response.text());
							} else {
								document.getElementById('profileInfo').innerHTML = "<p>No GitHub token provided.</p>";
								document.getElementById('commitHistory').innerHTML = "";
							}
						}  else if (response.status === 404) {
							document.getElementById('profileInfo').innerHTML = "<p>User not found.</p>";
							document.getElementById('commitHistory').innerHTML = "";
						}
					} else {
						const user = await response.json();
						updateUserDetails(user);
					}

				} catch (error) {
					console.error('Error fetching data:', error);
					document.getElementById('profileInfo').innerHTML = "<p>"+error.mmessage+"</p>";
					document.getElementById('commitHistory').innerHTML = "";
				}
			});
		</script>
		@components.Footer()
	</html>
}
